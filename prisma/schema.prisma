generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
}


model User {
  id           String   @id @default(uuid())
  displayName  String   @map("name")
  secretCode   String   @unique @map("secretcode")
  joinCode     String   @default("PUBLIC")
  isAdmin      Boolean  @default(false)
  alive        Boolean  @default(true)
  createdAt    DateTime @default(now())

  // NEW (admin only; optional for normal users)
  email        String?  @unique
  adminPassword String? @map("admin_password")
  adminPasswordHash String? @map("adminpasswordhash")
  lastName     String?

  picks        Pick[]
  statuses     UserStatus[]
  sessions     Session[]
  jokerUsages  JokerUsage[]

@@map ("User")
}

model Season {
  id                String            @id @default(uuid())
  name              String
  year              Int
  isActive          Boolean           @default(true)
  gameweeks         Gameweek[]
  statuses          UserStatus[]
  jokerAssignments  JokerAssignment[]
}

model Gameweek {
  id                String          @id @default(uuid())
  seasonId          String
  number            Int
  deadline          DateTime
  isLocked          Boolean         @default(false)
  graded            Boolean         @default(false)
  season            Season          @relation(fields: [seasonId], references: [id])
  start   DateTime // GW open time
  end     DateTime // GW end (after last match)
  picks             Pick[]
  fixtures          Fixture[]
  jokerAssignments  JokerAssignment[]
  jokerUsages       JokerUsage[]

  @@unique([seasonId, number], name: "seasonId_number")
}

model Club {
  id                String        @id @default(uuid())
  name              String
  shortName         String
  crestUrl          String?
  active            Boolean       @default(true)
  fplTeamId         Int?          @unique
  picks             Pick[]
  homeFix           Fixture[]     @relation("HomeClub")
  awayFix           Fixture[]     @relation("AwayClub")
  jokerAssignments  JokerAssignment[]
  jokerUsages       JokerUsage[]
}

model Fixture {
  id           String   @id @default(uuid())
  gwId      String
  gw        Gameweek @relation(fields: [gwId], references: [id])
  homeClubId   String
  awayClubId   String
  kickoff      DateTime
  homeGoals    Int?
  awayGoals    Int?
  status       String
  homeId    String
  awayId    String
  homeTeam  Team     @relation("HomeTeam", fields: [homeId], references: [id])
  awayTeam  Team     @relation("AwayTeam", fields: [awayId], references: [id])

  @@index([gwId)
  @@index([kickoff)
}

model Pick {
  id          String   @id @default(uuid())
  userId      String
  seasonId    String 
  gameweekId  String
  teamId      String
  createdAt   DateTime @default(now())
  source      String   @default("USER")
  user        User     @relation(fields: [userId], references: [id])
  gwID        String
  gw          Gameweek @relation(fields: [gwId], references: [id])
  team        Team     @relation(fields: [teamId], references: [id])

  @@unique([userId, gwId])
  @@unique([userId, teamId])
}

model UserStatus {
  id                  String   @id @default(uuid())
  userId              String
  seasonId            String
  isAlive             Boolean  @default(true)
  eliminatedGw        Int?
  jokerLifelinesLeft  Int      @default(2)
  lastUpdated         DateTime @default(now())
  user                User     @relation(fields: [userId], references: [id])
  season              Season   @relation(fields: [seasonId], references: [id])

  @@unique([userId, seasonId], name: "userId_seasonId")
}

model Session {
  id         String   @id @default(uuid())
  userId     String
  token      String   @unique
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
}

model JokerAssignment {
  id          String   @id @default(uuid())
  seasonId    String
  gameweekId  String
  clubId      String
  createdAt   DateTime @default(now())
  season      Season   @relation(fields: [seasonId], references: [id])
  gameweek    Gameweek @relation(fields: [gameweekId], references: [id])
  club        Club     @relation(fields: [clubId], references: [id])

  @@unique([seasonId, gameweekId], name: "seasonId_gameweekId")
}

model JokerUsage {
  id          String   @id @default(uuid())
  userId      String
  gameweekId  String
  clubId      String
  pickedAt    DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
  gameweek    Gameweek @relation(fields: [gameweekId], references: [id])
  club        Club     @relation(fields: [clubId], references: [id])
}


model Team {
  id        String   @id @default(uuid())
  name      String   @unique
  shortName String?
  code      String?  @unique
  fixturesH Fixture[] @relation("HomeTeam")
  fixturesA Fixture[] @relation("AwayTeam")
  picks     Pick[]
}
