generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id                String        @id @default(uuid())
  displayName       String        @map("name")
  secretCode         String   @unique(map: "User_secretCode_key") @map("secretcode")
  joinCode          String        @default("PUBLIC")
  isAdmin           Boolean       @default(false)
  alive             Boolean       @default(true)
  createdAt         DateTime      @default(now())

   email        String?  @unique(map: "User_email_key")
  adminPassword     String?       @map("admin_password")
  adminPasswordHash String?       @map("adminpasswordhash")
  lastName          String?

  picks             Pick[]
  statuses          UserStatus[]
  sessions          Session[]
  jokerUsages       JokerUsage[]

  @@map("User")
}

model Season {
  id               String           @id @default(uuid())
  name             String
  year             Int
  isActive         Boolean          @default(true)

  gameweeks        Gameweek[]
  statuses         UserStatus[]
  jokerAssignments JokerAssignment[]
}

model Gameweek {
  id               String      @id @default(uuid())
  seasonId         String
  number           Int
  deadline         DateTime
  isLocked         Boolean     @default(false)
  graded           Boolean     @default(false)
  season           Season      @relation(fields: [seasonId], references: [id])

  start            DateTime?
  end              DateTime?

  picks            Pick[]
  fixtures         Fixture[]
  jokerAssignments JokerAssignment[]
  jokerUsages      JokerUsage[]

  @@unique([seasonId, number], name: "seasonId_number")
}

model Club {
  id               String        @id @default(uuid())
  name             String
  shortName        String
  crestUrl         String?
  active           Boolean       @default(true)
  fplTeamId        Int?          @unique

  picks            Pick[]
  homeFix          Fixture[]     @relation("HomeTeam")
  awayFix          Fixture[]     @relation("AwayTeam")
  jokerAssignments JokerAssignment[]
  jokerUsages      JokerUsage[]
}

model Fixture {
  id          String   @id @default(uuid())

  gwId        String
  gw          Gameweek @relation(fields: [gwId], references: [id])

  homeClubId  String
  homeClub    Club     @relation("HomeTeam", fields: [homeClubId], references: [id])

  awayClubId  String
  awayClub    Club     @relation("AwayTeam", fields: [awayClubId], references: [id])

  kickoff     DateTime
  homeGoals   Int?
  awayGoals   Int?
  status      String

  @@index([gwId])
  @@index([kickoff])
}

model Pick {
  id         String   @id @default(uuid())

  userId     String
  seasonId   String

  gwId       String
  gw         Gameweek @relation(fields: [gwId], references: [id])

  clubId     String
  club       Club     @relation(fields: [clubId], references: [id])

  createdAt  DateTime @default(now())
  source     String   @default("USER")

  user       User     @relation(fields: [userId], references: [id])

   @@unique([userId, gwId], map: "pick_unique_per_gw")
   @@unique([userId, clubId], map: "pick_unique_user_club")
}

model UserStatus {
  id                 String   @id @default(uuid())
  userId             String
  seasonId           String
  isAlive            Boolean  @default(true)
  eliminatedGw       Int?
  jokerLifelinesLeft Int      @default(2)
  lastUpdated        DateTime @default(now())

  user               User     @relation(fields: [userId], references: [id])
  season             Season   @relation(fields: [seasonId], references: [id])

  @@unique([userId, seasonId], name: "userId_seasonId")
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
}

model JokerAssignment {
  id         String   @id @default(uuid())
  seasonId   String
  gameweekId String
  clubId     String
  createdAt  DateTime @default(now())

  season     Season   @relation(fields: [seasonId], references: [id])
  gameweek   Gameweek @relation(fields: [gameweekId], references: [id])
  club       Club     @relation(fields: [clubId], references: [id])

  @@unique([seasonId, gameweekId], name: "seasonId_gameweekId")
}

model JokerUsage {
  id         String   @id @default(uuid())
  userId     String
  gameweekId String
  clubId     String
  pickedAt   DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id])
  gameweek   Gameweek @relation(fields: [gameweekId], references: [id])
  club       Club     @relation(fields: [clubId], references: [id])
}
